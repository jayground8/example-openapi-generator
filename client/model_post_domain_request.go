/*
ncloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PostDomainRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostDomainRequest{}

// PostDomainRequest struct for PostDomainRequest
type PostDomainRequest struct {
	Comments *string `json:"comments,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewPostDomainRequest instantiates a new PostDomainRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostDomainRequest() *PostDomainRequest {
	this := PostDomainRequest{}
	return &this
}

// NewPostDomainRequestWithDefaults instantiates a new PostDomainRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostDomainRequestWithDefaults() *PostDomainRequest {
	this := PostDomainRequest{}
	return &this
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *PostDomainRequest) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *PostDomainRequest) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *PostDomainRequest) SetComments(v string) {
	o.Comments = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PostDomainRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PostDomainRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PostDomainRequest) SetName(v string) {
	o.Name = &v
}

func (o PostDomainRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostDomainRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullablePostDomainRequest struct {
	value *PostDomainRequest
	isSet bool
}

func (v NullablePostDomainRequest) Get() *PostDomainRequest {
	return v.value
}

func (v *NullablePostDomainRequest) Set(val *PostDomainRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostDomainRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostDomainRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostDomainRequest(val *PostDomainRequest) *NullablePostDomainRequest {
	return &NullablePostDomainRequest{value: val, isSet: true}
}

func (v NullablePostDomainRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostDomainRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


